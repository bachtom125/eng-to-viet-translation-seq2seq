# -*- coding: utf-8 -*-
"""translating-eng-to-viet-seq2seq.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-l_EFKHaLVlD1D03nZx3B77MBo-B_xHS

Load Input
"""

import pandas as pd
import numpy as np

data = pd.read_csv('vie.txt', delimiter='\t')
data.shape

input_texts = [] # original text
target_texts = [] # translated text
target_texts_inputs = [] # translated text offset by 1

for line in open('vie.txt'):
  if '\t' not in line:
    continue

  text, translated_text, *rest = line.split(sep='\t')
  input_texts.append(text)
  target_texts.append(translated_text)

for i in range(5000, 5005):
  print("Orignal: ", input_texts[i])
  print("Translated: ", target_texts[i])
  print()

"""Examination"""

import matplotlib.pyplot as plt

input_lens = [len(line.split(' ')) for line in input_texts]
target_lens = [len(line.split(' ')) for line in target_texts]

length_df = pd.DataFrame({'text':input_lens, 'translation':target_lens})
length_df.hist(bins = 30)
plt.show()

max_input_len = 10
max_target_len = 12

"""Preprocessing (experiemnt: without removing stopwords)"""

contraction_mapping = {"ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not",
                           "didn't": "did not", "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not",
                           "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is",
                           "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would",
                           "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would",
                           "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam",
                           "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have",
                           "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock",
                           "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have",
                           "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is",
                           "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as",
                           "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would",
                           "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have",
                           "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have",
                           "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are",
                           "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are",
                           "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is",
                           "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have",
                           "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have",
                           "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all",
                           "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have",
                           "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have",
                           "you're": "you are", "you've": "you have"}

from bs4 import BeautifulSoup
import re
import nltk
import spacy
from nltk.corpus import stopwords
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
nlp = spacy.load("en_core_web_sm")

def clean_english_text(text): # clean a string
  new_text = text.lower()
  new_text = BeautifulSoup(new_text, "lxml").text # remove html tags
  new_text = re.sub(r'\([^)]*\)', '', new_text)
  new_text = re.sub('"','', new_text)
  new_text = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in new_text.split(" ")])
  new_text = re.sub(r"'s\b","",new_text)

  final_text = [w for w in new_text if not w in punctuation_marks]
  final_text = ''.join(final_text)
  final_text = re.sub(r"  "," ",final_text)

  doc = nlp(final_text)
  lemmatized_doc = [token.lemma_ for token in doc]
  return ' '.join(lemmatized_doc)

cleaned_inputs = [clean_english_text(text) for text in input_texts]

import string
punctuation_marks = list(string.punctuation)

def clean_vietnamese_text(text): # clean a string
  new_text = text.lower()
  new_text = BeautifulSoup(new_text, "lxml").text # remove html tags
  new_text = re.sub(r'\([^)]*\)', '', new_text)
  new_text = re.sub('"','', new_text)
  new_text = re.sub(r"'s\b","",new_text)
  # new_text = re.sub("[^a-zA-Z]", " ", new_text)

  final_text = [w for w in new_text if not w in punctuation_marks]
  final_text = ''.join(final_text)
  final_text = re.sub(r"  "," ",final_text)

  return final_text

cleaned_targets = [clean_vietnamese_text(text) for text in target_texts]

cleaned_targets = [line + " <eos>" for line in cleaned_targets]
cleaned_targets_inputs = ["<sos> " + line for line in cleaned_targets]

for i in range(7000, 7050):
  print("Original cleaned: ", cleaned_inputs[i])
  print("Translated cleaned: ", cleaned_targets[i])
  print()

"""Split train and test set"""

from sklearn.model_selection import train_test_split
x_tr, x_val, y_tr, y_val = train_test_split(cleaned_inputs, cleaned_targets, test_size=0.2, random_state=0, shuffle=True)

"""Tokenize"""

from keras.preprocessing.text import Tokenizer
from keras.utils import pad_sequences

x_tokenizer = Tokenizer()
x_tokenizer.fit_on_texts(x_tr)

x_tr_seq = x_tokenizer.texts_to_sequences(x_tr)
x_val_seq = x_tokenizer.texts_to_sequences(x_val)

x_tr_seq = pad_sequences(x_tr_seq, maxlen=max_input_len, padding='post', truncating='post')
x_val_seq = pad_sequences(x_val_seq, maxlen=max_input_len, padding='post', truncating='post')

x_vocab_size = len(x_tokenizer.word_index)

y_tokenizer = Tokenizer()
y_tokenizer.fit_on_texts(y_tr)

y_tr_seq = y_tokenizer.texts_to_sequences(y_tr)
y_val_seq = y_tokenizer.texts_to_sequences(y_val)

y_tr_seq = pad_sequences(y_tr_seq, maxlen=max_target_len, padding='post', truncating='post')
y_val_seq = pad_sequences(y_val_seq, maxlen=max_target_len, padding='post', truncating='post')

y_vocab_size = len(y_tokenizer.word_index)

"""Building the Model"""

